1. Restaurants

CREATE TABLE restaurants(
    RestaurantID INT PRIMARY KEY,
    Name VARCHAR(30),
    City VARCHAR(30),
    CuisineType VARCHAR(20), -- (e.g., 'Indian', 'Chinese', 'Italian')
    Rating INT CHECK (Rating <=5), -- (out of 5)
    AverageCostForTwo INT 
);
.
.
.


2. Customers

CREATE TABLE customers(
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(30),
    LastName VARCHAR(30),
    Phone VARCHAR(20), 
    City VARCHAR(30),
    JoinDate DATE 
);
.
.
.


3. Orders

CREATE TABLE orders(
    OrderID INT PRIMARY KEY,
    CustomerID INT, --  (Foreign Key)
    RestaurantID INT, --  (Foreign Key)
    OrderDate DATE , 
    OrderAmount INT,
    OrderStatus VARCHAR(30), -- (e.g., 'Delivered', 'Cancelled', 'Pending')
    FOREIGN KEY(CustomerID) REFERENCES customers(CustomerID),
    FOREIGN KEY(RestaurantID) REFERENCES restaurants(RestaurantID)
    
);
.
.
.


4. Reviews

CREATE TABLE reviews(
    ReviewID INT PRIMARY KEY,
    CustomerID INT, --  (Foreign Key)
    RestaurantID INT, --  (Foreign Key)
    Rating INT CHECK (Rating <=5), -- (out of 5) , 
    Comments CHAR(100),
    ReviewDate DATE,
    FOREIGN KEY(CustomerID) REFERENCES customers(CustomerID),
    FOREIGN KEY(RestaurantID) REFERENCES restaurants(RestaurantID)
    
);
.
.
.

5. Payments

CREATE TABLE payments(
    PaymentID INT PRIMARY KEY,
    OrderID INT, --  (Foreign Key)
    PaymentMethod VARCHAR(30), --  (e.g., 'Card', 'Cash', 'Wallet')
    Amount INT ,
    PaymentDate DATE,
    FOREIGN KEY(OrderID) REFERENCES orders(OrderID)
    
);
.
.
.

-----------------------------------------------------------------------------------------------------------



q1. Retrieve the names and locations of restaurants with a rating of 4.5 or higher

SELECT Name,City,Rating
FROM restaurants
WHERE 
Rating >4.5;





q2. Find the total number of orders placed by each customer.

SELECT c.CustomerID,c.FirstName,COUNT(o.OrderID) AS No_of_orders
FROM customers AS c 
JOIN
orders as o 
ON c.CustomerID = o.CustomerID
GROUP BY 
c.CustomerID,c.FirstName;






q3. List all restaurants offering "Italian" cuisine in "Mumbai".

SELECT RestaurantID,Name,City,Rating,CuisineType
FROM restaurants
WHERE CuisineType = 'Italian' AND City = "Mumbai";









q4. Calculate the total revenue generated by each restaurant from completed orders
SELECT o.RestaurantID , SUM(Amount)
FROM orders AS o 
JOIN 
payments AS p 
ON o.OrderID = p.OrderID
WHERE o.OrderStatus = 'Delivered'
GROUP BY 
o.RestaurantID;








q5. Retrieve the most recent order placed by each customer

SELECT CustomerID ,OrderID ,MAX(OrderDate) AS Recent_Order
FROM orders
GROUP BY 
CustomerID;





q6. List customers who have not placed any orders yet

SELECT c.CustomerID , c.FirstName
FROM customers AS c 
LEFT JOIN
orders AS o
ON 
c.CustomerID = o.CustomerID
WHERE o.OrderID IS NULL;






q7. Identify the most reviewed restaurants.

(using 1 table)
SELECT RestaurantID , COUNT(RestaurantID)
FROM reviews
GROUP BY 
RestaurantID
ORDER BY 
RestaurantID DESC;




(using 2 tables)
SELECT r.RestaurantID , s.Name, COUNT(r.RestaurantID) AS Review_Count
FROM reviews AS r 
JOIN restaurants as s
ON r.RestaurantID = s.RestaurantID
GROUP BY 
RestaurantID
ORDER BY 
RestaurantID DESC;




q8. Find the most preferred payment method.

SELECT PaymentMethod , COUNT(PaymentMethod) AS Preferred_Method
FROM payments
GROUP BY 
PaymentMethod
ORDER BY 
Preferred_Method DESC
LIMIT 1;







q9. List the top 5 restaurants by total revenue

SELECT r.RestaurantID,r.Name,SUM(p.Amount) AS total_revenue
FROM restaurants AS r
JOIN orders as o 
ON r.RestaurantID = o.RestaurantID
JOIN payments AS p 
ON o.OrderID = p.OrderID
GROUP BY 
r.RestaurantID,r.Name
ORDER BY 
total_revenue DESC
LIMIT 5;







q10. Show the details of all cancelled orders along with the customer's and restaurant's names.

SELECT r.RestaurantID,r.Name, c.CustomerID,c.FirstName ,o.OrderID,o.OrderDate,o.OrderAmount,o.OrderStatus
FROM restaurants AS r
JOIN 
orders as o 
ON r.RestaurantID = o.RestaurantID
JOIN 
customers AS c 
ON o.CustomerID = c.CustomerID

WHERE
o.OrderStatus = 'cancelled';




















































































































































































































































































































